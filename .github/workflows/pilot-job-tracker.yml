name: Pilot Job Tracker - Enhanced

on:
  schedule:
    # Run at 00:00, 11:00 and 20:00 UTC every day
    - cron: '0 0,11,20 * * *'

  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      config_file:
        description: 'Config file to use (config_enhanced.yml or config_working.yml)'
        required: false
        default: 'config_enhanced.yml'
        type: choice
        options:
          - config_enhanced.yml
          - config_working.yml
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

jobs:
  track_jobs:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium --with-deps

      - name: Restaurar base de datos
        uses: actions/cache@v3
        with:
          path: jobs.db
          key: jobs-db-cache

      - name: Run job tracker with enhanced logging
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CONFIG_PATH: ${{ inputs.config_file || 'config_enhanced.yml' }}
          DEBUG: ${{ inputs.debug_mode && '1' || '0' }}
        run: |
          echo "Starting job tracker at $(date)"
          echo "Using config: ${CONFIG_PATH}"
          echo "Debug mode: ${DEBUG}"
          python main.py
          echo "Job tracker completed at $(date)"

      - name: Guardar base de datos en cachÃ©
        uses: actions/cache@v3
        with:
          path: jobs.db
          key: jobs-db-cache

      - name: Upload logs as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            *.log
            job_tracker.log
          retention-days: 7

      - name: Check job statistics
        if: always()
        run: |
          echo "=== DATABASE STATISTICS ==="
          python -c "
import sqlite3
conn = sqlite3.connect('jobs.db')

# Total jobs
total = conn.execute('SELECT COUNT(*) FROM jobs').fetchone()[0]
print(f'Total jobs in database: {total}')

# Open jobs
open_jobs = conn.execute('SELECT COUNT(*) FROM jobs WHERE is_open=1').fetchone()[0]
print(f'Currently open jobs: {open_jobs}')

# Jobs by company (top 10)
print('\\nTop companies by job count:')
companies = conn.execute('SELECT company, COUNT(*) as count FROM jobs WHERE is_open=1 GROUP BY company ORDER BY count DESC LIMIT 10').fetchall()
for company, count in companies:
    print(f'  {company}: {count} jobs')

# Recent jobs (last 24 hours)
recent = conn.execute('SELECT COUNT(*) FROM jobs WHERE datetime(first_seen) > datetime(\"now\", \"-1 day\")').fetchone()[0]
print(f'\\nJobs found in last 24 hours: {recent}')

conn.close()
          "

      - name: Notify on failure
        if: failure() && github.event_name == 'schedule'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python -c "
import os, requests
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
chat_id = os.getenv('TELEGRAM_CHAT_ID')
if bot_token and chat_id:
    message = f'ðŸš¨ Pilot Job Tracker FAILED\\nRun: ${{ github.run_number }}\\nTime: $(date)\\nCheck logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
    requests.post(f'https://api.telegram.org/bot{bot_token}/sendMessage', 
                  json={'chat_id': chat_id, 'text': message})
          "
          
